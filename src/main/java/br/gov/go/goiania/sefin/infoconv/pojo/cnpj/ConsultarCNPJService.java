
package br.gov.go.goiania.sefin.infoconv.pojo.cnpj;

import javax.net.ssl.*;
import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.security.SecureRandom;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "ConsultarCNPJ", targetNamespace = "https://acesso.infoconv.receita.fazenda.gov.br/ws/cnpj/", wsdlLocation = "file:/C:/prefeitura/infoconv/src/main/resources/infoconv_cnpj.wsdl")
public class ConsultarCNPJService
    extends Service
{

    private final static URL CONSULTARCNPJ_WSDL_LOCATION;
    private final static WebServiceException CONSULTARCNPJ_EXCEPTION;
    private final static QName CONSULTARCNPJ_QNAME = new QName("https://acesso.infoconv.receita.fazenda.gov.br/ws/cnpj/", "ConsultarCNPJ");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(getTrustingSSLSocketFactory());

            url = new URL("file:/C:/prefeitura/infoconv/src/main/resources/infoconv_cnpj.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        CONSULTARCNPJ_WSDL_LOCATION = url;
        CONSULTARCNPJ_EXCEPTION = e;
    }

    public ConsultarCNPJService() {
        super(__getWsdlLocation(), CONSULTARCNPJ_QNAME);
    }

    public ConsultarCNPJService(WebServiceFeature... features) {
        super(__getWsdlLocation(), CONSULTARCNPJ_QNAME, features);
    }

    public ConsultarCNPJService(URL wsdlLocation) {
        super(wsdlLocation, CONSULTARCNPJ_QNAME);
    }

    public ConsultarCNPJService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, CONSULTARCNPJ_QNAME, features);
    }

    public ConsultarCNPJService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ConsultarCNPJService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ConsultarCNPJSoap
     */
    @WebEndpoint(name = "ConsultarCNPJSoap")
    public ConsultarCNPJSoap getConsultarCNPJSoap() {
        return super.getPort(new QName("https://acesso.infoconv.receita.fazenda.gov.br/ws/cnpj/", "ConsultarCNPJSoap"), ConsultarCNPJSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ConsultarCNPJSoap
     */
    @WebEndpoint(name = "ConsultarCNPJSoap")
    public ConsultarCNPJSoap getConsultarCNPJSoap(WebServiceFeature... features) {
        return super.getPort(new QName("https://acesso.infoconv.receita.fazenda.gov.br/ws/cnpj/", "ConsultarCNPJSoap"), ConsultarCNPJSoap.class, features);
    }

    private static URL __getWsdlLocation() {
        if (CONSULTARCNPJ_EXCEPTION!= null) {
            throw CONSULTARCNPJ_EXCEPTION;
        }
        return CONSULTARCNPJ_WSDL_LOCATION;
    }

    private static SSLSocketFactory getTrustingSSLSocketFactory() {
        return SSLSocketFactoryHolder.INSTANCE;
    }

    private static interface SSLSocketFactoryHolder {
        public static final SSLSocketFactory INSTANCE = createSSLSocketFactory();
    }

    private static SSLSocketFactory createSSLSocketFactory() {
        TrustManager[] trustManagers = new TrustManager[] { new NaiveTrustManager() };
        SSLContext sslContext;
        try {
            sslContext = SSLContext.getInstance("SSL");
            sslContext.init(new KeyManager[0], trustManagers, new SecureRandom());
            return sslContext.getSocketFactory();
        } catch (GeneralSecurityException e) {
            System.err.println(e.getMessage());
            return null;
        }
    }

    private static class NaiveTrustManager implements X509TrustManager {
        @Override
        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) throws java.security.cert.CertificateException {
        }

        @Override
        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) throws java.security.cert.CertificateException {
        }

        @Override
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return new java.security.cert.X509Certificate[0];
        }
    }
}
